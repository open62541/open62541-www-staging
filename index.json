[{"categories":null,"contents":"A little known feature that adds a lot of convenience for developers on Linux is the pretty-printing of OPC UA data types. It reduces visual noise and makes the introspection of local variables much more convenient.\nPretty-printing can be activated by loading the definitions as source \u0026lt;open62541\u0026gt;/tools/gdb-pretty-print.py. Below are some before/after examples to showcase the effect.\nNodeIds have four different representations (numeric, string, guid, bytestring). This leads to a very cluttered gdb output due to the C-union where a numeric id is also interpreted as a (string) pointer.\nWith pretty-printing enabled, the NodeId is converted as a human-readable string. This is the standard-defined format that can also be parsed via UA_NodeId_parse.\nAnother complicated datatype is UA_Variant. A variant is a container that can wrap any other OPC UA data type, also as a (multi-dimensional) array. Printing a variant in GDB leads to a messy output. Particularly the data type information is not automatically resolved. Furthermore, the value is hidden behind an opaque void-pointer.\nThe variant is immediately understandable with pretty-printing enabled. In this example, the variant contains a scalar timestamp value.\n@Author Dr. -Ing. Julius Pfrommer, 2021\n","permalink":"open62541-www-staging/articles/21_12_01_pritty_printing/","tags":null,"title":"Pretty-printing in the gdb Debugger"},{"categories":null,"contents":"Release notes:\nThis is the third patch release for the 1.2 release family of open62541. There were only bugfixes and no API-breaking changes applied for the patch release. Important changes compared to the previous release include:\n fix(plugin): Remove assert about the key length in ua_openssl_basic256sha256.c fix(arch): Use AF_INET in the socket hints if IPV6 is disabled fix(arch) : ServerNetworkLayerTCP_start continues if one network interface fails to bind fix(pubsub): Allow multiple readers on the same NetworkMessage  open62541 (http://open62541.org) is an open source and free implementation of OPC UA (OPC Unified Architecture) written in the common subset of the C99 and C++98 languages. The library is usable with all major compilers and provides the necessary tools to implement dedicated OPC UA clients and servers, or to integrate OPC UA-based communication into existing applications. The open62541 library is platform independent. All platform-specific functionality is implemented via exchangeable plugins. Plugin implementations are provided for the major operating systems.\nopen62541 is licensed under the Mozilla Public License v2.0 (MPLv2). This allows the open62541 library to be combined and distributed as part of proprietary software. Only changes to the files of the open62541 library itself need to be licensed under the MPLv2 when copied and distributed. The plugins, as well as the server and client examples are in the public domain (CC0 license). They can be reused under any license and changes do not have to be published.\nNew features compared to the previous release series 1.1 are:\n Support for additional OPC UA Services (SetTriggering, TransferSubscription) Support for more data-types: structures with optional fields and for unions Support for pretty-printing of OPC UA data-types Support for parsing of standard-defined human-readable NodeIds, BrowsePaths, etc. Support for OpenSSL-based encryption and certificate validation Support for WebSocket Secure (wss) Improved support for Events and Alarms\u0026amp;Conditions Improved support for PubSub subscribers Improved support for realtime PubSub by integration with external interrupt handling and a configurable realtime \u0026ldquo;fast path\u0026rdquo; Update to the v1.04 nodeset definitions from the OPC Foundation  Besides the major functional additions, many small features, fixes and general improvements went into this release.\nWith the release of the release candidate, the API for the 1.2 release series is frozen. Only fixes and non-breaking changes will be integrated going forward. Note that the v1.2 release family contains new features compared to v1.0. These have not been part of the certification that was achieved for the example server based on the v1.0 release.\nThe new release can be directly downloaded here:\nGithub open62541 1.2.3\n","permalink":"open62541-www-staging/articles/21_12_01_release_1_2_3/","tags":null,"title":"Release of open62541 Version 1.2.3"},{"categories":null,"contents":"The open62541 has now a new modern website. The website is built with the HUGO Framework (https://gohugo.io/) and the content is therefore completely written in markdown. The website is public visible in our open62541-www repository. The deploy process of the new webpage is automated by a github action. During the deploy phase the markdown files are compiled with the hugo tools to a static website.\n New responsive design Secure static website Publicly visible in the open62541-www repository  ","permalink":"open62541-www-staging/articles/21_11_30_new-website/","tags":null,"title":"New Website for the open62541 project"},{"categories":null,"contents":"","permalink":"open62541-www-staging/community/","tags":null,"title":""},{"categories":null,"contents":null,"permalink":"open62541-www-staging/articles/","tags":null,"title":"Articles"},{"categories":null,"contents":null,"permalink":"open62541-www-staging/","tags":null,"title":"open62541"},{"categories":null,"contents":"","permalink":"open62541-www-staging/","tags":null,"title":"Syna Theme"},{"categories":null,"contents":"","permalink":"open62541-www-staging/documentation/","tags":null,"title":"Documentation"},{"categories":null,"contents":"Responsible Organization:\nopen62541-Team\nmailto: open62541@googlegroups.com\n ","permalink":"open62541-www-staging/about/","tags":null,"title":"About"},{"categories":null,"contents":"OPC Foundation Certified for Compliance logo is a trademark of the OPC Foundation and may be used only by written permission of the OPC Foundation. Any unauthorized use of the Certified for Compliance logo is prohibited. OPC Foundation Certified for Compliance logo indicates that this product has been tested by an independent certification lab and certified to be compliant with the following OPC UA Profiles which are part of the OPC UA Specifications:\n**Profile:**\nMicro Embedded Device Server\n**Security Policies:**\nBasic128Rsa15\nBasic256\nBasic256Sha256\n**User Tokens:**\nAnonymous Facet\nUser Name Password Server Facet\nMethod Server Facet\nNode Management Facet\nAdditional information about compliance testing, logo program and a summary of test results can be found at www.opcfoundation.org for: Open62541 OPC UA Server (server_ctt) 1.0.0-rc5.\nThe precise version used for the certification has the commit hash 1135945fe8eb8e4e9df7694e5d564443a6d4df80 . Later releases in the 1.0 release family contain only bugfixes in comparison to the certified version.\n**Certification Limitations \u0026amp; Common Misconceptions:**\nCertification was done for a reference server (\u0026ldquo;CTT server\u0026rdquo;) based on the open62541 SDK and not for the SDK itself. The server implementation used for the certification can be found at https://github.com/open62541/open62541/blob/1.0/examples/server_ctt.c. No Certification Grandfathering: There is no grandfathering of certification, users who want their application based on open62541 to be certified need to undergo separate testing at the OPC Foundation Test Lab Certification is attempted for selected feature-sets (facets). Some features are implemented but not under test at this time. These features are disabled by default in the SDK:\nFeatures submitted for testing are based on granularity of \u0026ldquo;facets\u0026rdquo; (Micro Embedded Device Server, Method Facet, Node Management Facet and the SecurityPolicies). Some additional conformance units (e.g. for events) are already implemented. But the corresponding \u0026ldquo;facet\u0026rdquo; is not yet complete JSON encoding is implemented in open62541. But the feature cannot be certified due to the lack of official test cases and tools Historical data access is implemented in open62541. But the feature is not testable with the current CTT. We did however implement the standard test cases for historical data (that are part of the spec) in our unit tests At the time of writing this section (Sep 2019), PubSub (UADP) is implemented in open62541. But the feature cannot be certified due to the lack of official test cases and testing tools. We did however implement the standard cases used for the PubSub interoperability workshop, where we participated earlier this year. It should be noted that Kalycito is member of IIC TSN Testbed and OPC Foundation and Fraunhofer IOSB is a member of OPC Foundation. This enables us to closely follow the technology evolution path and be an early adopter. Interested in our work? Next steps to take OSADL continues to actively support the project and fosters addition of new features and functions. To do so it welcomes new participants who may select from various contribution levels as outlined at https://www.osadl.org/LoI2 As this is a rapidly evolving technology space, the official standards and compliance tools are evolving fast and the open source code is evolving fast as well. You might want to get external support to get your products certified and also integrate the latest feature additions to open source into your products as soon as possible. Kalycito provides such support for integration and certification and you can find more details abut their services at https://www.kalycito.com/opc-ua-sdk/.\n","permalink":"open62541-www-staging/certified/","tags":null,"title":"Certified SDK"},{"categories":null,"contents":"Building from source\nA detailed description on how to build from source can be found here: Installing\nPrebuilt packages\nPrebuild binaries You can always find prebuild binaries for every release on our Github Release Page.\nNightly single file releases for Linux and Windows of the last 50 commits can be found here: https://open62541.org/releases/\nOS Specific packages\nDebian packages can be found in our official PPA:\n Daily Builds (based on master branch): https://launchpad.net/~open62541-team/+archive/ubuntu/daily Release Builds (starting with Version 1.0): https://launchpad.net/~open62541-team/+archive/ubuntu/ppa  To install the open62541-dev stable package in Ubuntu, use these lines:\nsudo add-apt-repository ppa:open62541-team/ppa sudo apt-get update sudo apt-get install libopen62541-1-dev ","permalink":"open62541-www-staging/download/","tags":null,"title":"Download"}]